// Code generated by protoc-gen-go. DO NOT EDIT.
// source: buffer.proto

/*
Package buffer is a generated protocol buffer package.

It is generated from these files:
	buffer.proto

It has these top-level messages:
	Data
	Beer
*/
package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Additional string `protobuf:"bytes,3,opt,name=additional" json:"additional,omitempty"`
	Patch      []byte `protobuf:"bytes,4,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Data) GetAdditional() string {
	if m != nil {
		return m.Additional
	}
	return ""
}

func (m *Data) GetPatch() []byte {
	if m != nil {
		return m.Patch
	}
	return nil
}

type Beer struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Beer) Reset()                    { *m = Beer{} }
func (m *Beer) String() string            { return proto.CompactTextString(m) }
func (*Beer) ProtoMessage()               {}
func (*Beer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Beer) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Data)(nil), "Data")
	proto.RegisterType((*Beer)(nil), "Beer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrderService service

type OrderServiceClient interface {
	UpdateOrder(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Beer, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) UpdateOrder(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Beer, error) {
	out := new(Beer)
	err := grpc.Invoke(ctx, "/OrderService/UpdateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceServer interface {
	UpdateOrder(context.Context, *Data) (*Beer, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrder(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderService_UpdateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buffer.proto",
}

func init() { proto.RegisterFile("buffer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0x41, 0xcb, 0xc2, 0x30,
	0x0c, 0x40, 0xd9, 0xbe, 0xee, 0x53, 0xe3, 0xf0, 0x10, 0x3c, 0x14, 0x05, 0x19, 0x3b, 0x0d, 0x84,
	0x1d, 0xf4, 0x1f, 0x88, 0x77, 0x61, 0xe2, 0xdd, 0xae, 0xcd, 0xb0, 0x20, 0xae, 0xb4, 0x9d, 0xe0,
	0xbf, 0x97, 0x45, 0x04, 0x6f, 0x79, 0x2f, 0x90, 0x3c, 0xc8, 0xdb, 0xa1, 0xeb, 0xc8, 0xd7, 0xce,
	0xf7, 0xb1, 0x2f, 0xaf, 0x20, 0x8e, 0x2a, 0x2a, 0x5c, 0x40, 0x6a, 0x8d, 0x4c, 0x8a, 0xa4, 0x9a,
	0x35, 0xa9, 0x35, 0x88, 0x20, 0xe2, 0xcb, 0x91, 0x4c, 0xd9, 0xf0, 0x8c, 0x1b, 0x00, 0x65, 0x8c,
	0x8d, 0xb6, 0x7f, 0xa8, 0xbb, 0xfc, 0xe3, 0xcd, 0x8f, 0xc1, 0x25, 0x64, 0x4e, 0x45, 0x7d, 0x93,
	0xa2, 0x48, 0xaa, 0xbc, 0xf9, 0x40, 0x59, 0x80, 0x38, 0x10, 0x79, 0x94, 0x30, 0x09, 0x83, 0xd6,
	0x14, 0x02, 0xbf, 0x99, 0x36, 0x5f, 0xdc, 0x6d, 0x21, 0x3f, 0x79, 0x43, 0xfe, 0x4c, 0xfe, 0x69,
	0x35, 0xe1, 0x1a, 0xe6, 0x17, 0x67, 0x54, 0x24, 0xb6, 0x98, 0xd5, 0x63, 0xe1, 0x2a, 0xab, 0xc7,
	0x33, 0xed, 0x3f, 0x77, 0xef, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0x9b, 0x9d, 0x88, 0xc7,
	0x00, 0x00, 0x00,
}
